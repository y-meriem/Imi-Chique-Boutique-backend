// backend/controllers/categoryController.js
const Category = require('../models/categoryModel');
const cloudinary = require('../config/cloudinary');

// üîπ Fonction utilitaire pour extraire le public_id d'une URL Cloudinary
const getPublicIdFromUrl = (url) => {
  if (!url) return null;
  
  // Exemple d'URL: https://res.cloudinary.com/demo/image/upload/v1234567890/categories/abc123.jpg
  // On veut: categories/abc123
  
  const parts = url.split('/');
  const uploadIndex = parts.indexOf('upload');
  
  if (uploadIndex === -1) return null;
  
  // Prendre tout apr√®s 'upload' et 'v1234567890' (version)
  const pathParts = parts.slice(uploadIndex + 2); // Skip 'upload' et version
  const fileWithExt = pathParts.join('/');
  
  // Enlever l'extension
  return fileWithExt.replace(/\.[^/.]+$/, '');
};

const categoryController = {
  // GET /api/categories
  getAllCategories: async (req, res) => {
    try {
      const categories = await Category.getAll();
      res.status(200).json({ success: true, data: categories });
    } catch (error) {
      console.error('‚ùå Erreur getAllCategories:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la r√©cup√©ration des cat√©gories'
      });
    }
  },

  // GET /api/categories/:id
  getCategoryById: async (req, res) => {
    try {
      const { id } = req.params;
      const category = await Category.getById(id);

      if (!category) {
        return res.status(404).json({
          success: false,
          message: 'Cat√©gorie non trouv√©e'
        });
      }

      res.status(200).json({ success: true, data: category });
    } catch (error) {
      console.error('‚ùå Erreur getCategoryById:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur serveur'
      });
    }
  },

  // POST /api/categories - Cr√©er une cat√©gorie
  createCategory: async (req, res) => {
    try {
      const { nom } = req.body;
      const image = req.file;

      // Validation
      if (!nom || nom.trim() === '') {
        return res.status(400).json({
          success: false,
          message: 'Le nom de la cat√©gorie est requis'
        });
      }

      // V√©rifier si la cat√©gorie existe d√©j√†
      const exists = await Category.existsByName(nom);
      if (exists) {
        // Si une image a √©t√© upload√©e, la supprimer de Cloudinary
        if (image && image.public_id) {
          await cloudinary.uploader.destroy(image.public_id);
        }
        return res.status(409).json({
          success: false,
          message: 'Une cat√©gorie avec ce nom existe d√©j√†'
        });
      }

      // L'URL Cloudinary est dans req.file.path
      const image_url = image ? image.path : null;

      console.log('‚úÖ Image upload√©e:', {
        url: image_url,
        public_id: image?.public_id
      });

      const newCategory = await Category.create(nom.trim(), image_url);

      res.status(201).json({
        success: true,
        message: 'Cat√©gorie cr√©√©e avec succ√®s',
        data: newCategory
      });
    } catch (error) {
      console.error('‚ùå Erreur createCategory:', error);
      
      // Si erreur, supprimer l'image upload√©e sur Cloudinary
      if (req.file && req.file.public_id) {
        try {
          await cloudinary.uploader.destroy(req.file.public_id);
          console.log('üóëÔ∏è Image Cloudinary supprim√©e apr√®s erreur');
        } catch (cleanupError) {
          console.error('‚ùå Erreur cleanup Cloudinary:', cleanupError);
        }
      }
      
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la cr√©ation'
      });
    }
  },

  // PUT /api/categories/:id - Mettre √† jour une cat√©gorie
  updateCategory: async (req, res) => {
    try {
      const { id } = req.params;
      const { nom } = req.body;
      const image = req.file;

      // Validation
      if (!nom || nom.trim() === '') {
        return res.status(400).json({
          success: false,
          message: 'Le nom de la cat√©gorie est requis'
        });
      }

      // R√©cup√©rer la cat√©gorie existante
      const category = await Category.getById(id);
      if (!category) {
        // Supprimer la nouvelle image si elle a √©t√© upload√©e
        if (image && image.public_id) {
          await cloudinary.uploader.destroy(image.public_id);
        }
        return res.status(404).json({
          success: false,
          message: 'Cat√©gorie non trouv√©e'
        });
      }

      // V√©rifier le nom unique
      const exists = await Category.existsByName(nom, id);
      if (exists) {
        // Supprimer la nouvelle image si elle a √©t√© upload√©e
        if (image && image.public_id) {
          await cloudinary.uploader.destroy(image.public_id);
        }
        return res.status(409).json({
          success: false,
          message: 'Une cat√©gorie avec ce nom existe d√©j√†'
        });
      }

      let image_url = category.image_url;

      // Si une nouvelle image est upload√©e
      if (image) {
        // Supprimer l'ancienne image de Cloudinary
        if (category.image_url) {
          const oldPublicId = getPublicIdFromUrl(category.image_url);
          if (oldPublicId) {
            try {
              await cloudinary.uploader.destroy(oldPublicId);
              console.log('üóëÔ∏è Ancienne image supprim√©e:', oldPublicId);
            } catch (error) {
              console.error('‚ö†Ô∏è Erreur suppression ancienne image:', error);
            }
          }
        }
        
        // Utiliser la nouvelle URL
        image_url = image.path;
        console.log('‚úÖ Nouvelle image:', image_url);
      }

      const updatedCategory = await Category.update(id, nom.trim(), image_url);

      res.status(200).json({
        success: true,
        message: 'Cat√©gorie mise √† jour avec succ√®s',
        data: updatedCategory
      });
    } catch (error) {
      console.error('‚ùå Erreur updateCategory:', error);
      
      // Cleanup de la nouvelle image en cas d'erreur
      if (req.file && req.file.public_id) {
        try {
          await cloudinary.uploader.destroy(req.file.public_id);
        } catch (cleanupError) {
          console.error('‚ùå Erreur cleanup:', cleanupError);
        }
      }
      
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la mise √† jour'
      });
    }
  },

  // DELETE /api/categories/:id
  deleteCategory: async (req, res) => {
    try {
      const { id } = req.params;
      const category = await Category.getById(id);

      if (!category) {
        return res.status(404).json({
          success: false,
          message: 'Cat√©gorie non trouv√©e'
        });
      }

      // Supprimer l'image de Cloudinary si elle existe
      if (category.image_url) {
        const publicId = getPublicIdFromUrl(category.image_url);
        if (publicId) {
          try {
            await cloudinary.uploader.destroy(publicId);
            console.log('üóëÔ∏è Image supprim√©e de Cloudinary:', publicId);
          } catch (error) {
            console.error('‚ö†Ô∏è Erreur suppression image Cloudinary:', error);
            // On continue quand m√™me la suppression de la cat√©gorie
          }
        }
      }

      await Category.delete(id);

      res.status(200).json({
        success: true,
        message: 'Cat√©gorie supprim√©e avec succ√®s'
      });
    } catch (error) {
      console.error('‚ùå Erreur deleteCategory:', error);
      
      // Erreur de contrainte de cl√© √©trang√®re
      if (error.code === 'ER_ROW_IS_REFERENCED_2') {
        return res.status(409).json({
          success: false,
          message: 'Impossible de supprimer cette cat√©gorie car des produits y sont associ√©s'
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la suppression'
      });
    }
  }
};

module.exports = categoryController;
